# file: chaos.gfs
# author: Jess Robertson (based on code from Gerris examples)
#         CSIRO Earth Science and Resource Engineering
# date:   Tuesday February 26, 2013
#
# description: Simulation of thread formation in a laminar chaotic flow field. 
#
#   Ratios are sulfide / magma. Don't modify this script directly, see
#   configure.py to set parameters etc.
#
1 0 GfsSimulation GfsBox GfsGEdge {} {
    # Function definitions etc
    Global {
        // Physical properties
        static double viscosity(double tracer) {
            return (1 + (viscosity_ratio - 1) * tracer)
                   / ( (float) reynolds_number );
        }

        // Tracer distribution
        static double tracer_init(double x, double y) {
            double radius_sq = x * x + y * y;
            return radius_sq < droplet_radius ? 1 : 0;
        }

        // Streamfunction
        static double tick(double t) {
            int step = floor(2 * t / period);
            return step % 2;
        }
        static double tock(double t) {
            int step = floor(2 * t / period);
            return (step - 1) % 2;
        }
        static double vortex_x(double x0, double y0, double x, double y) {
            double radius_sq = (x - x0) * (x - x0) + (y - y0) * (y - y0);
            return vortex_strength * y / radius_sq;
        }
        static double vortex_y(double x0, double y0, double x, double y) {
            double radius_sq = (x - x0) * (x - x0) + (y - y0) * (y - y0);
            return vortex_strength * x / radius_sq;
        }
    }

    # Set up boundaries
    Solid ({
        double c = cube (0.0, 0.0, 0.0, 1.1);
        double e = ellipse(x, y, domain_radius, domain_radius);
        return MAX(c, - cylinder);
    })
    Refine 5
    RefineSurface 9 (ellipse(x, y, droplet_radius, droplet_radius))
    RefineSolid 9

    # Set up sulfide and magma properties
    VariableTracerVOF T
    VariableCurvature K T Kmax
    PhysicalParams {
        L = 2. * domain_radius
        alpha = 1
    }
    SourceViscosity viscosity(T)
    SourceTension T surface_tension K

    # Initialize the velocity and tracer
    Init {} {
        T = tracer_init(x, y)
    }

    # Set up forcings
    Source U {
        return tick(t) * vortex_x(offset, 0, x, y) + 
               tock(t) * vortex_x(-offset, 0, x, y);
    }
    Source V {
        return tick(t) * vortex_y(offset, 0, x, y) + 
               tock(t) * vortex_y(-offset, 0, x, y);
    }

    ## ADAPTIVITY
    # We want adaptivity around the fluid interface and the velocity field
    AdaptGradient { istep = 1 } {
        cmax = 5e-2
        minlevel = min_level
        maxlevel = max_level
    } T
    AdaptError { istart = 5 istep = 1 } {
        cmax = 5e-2
        minlevel = min_level
        maxlevel = max_level
    } U
    AdaptError { istart = 5 istep = 1 } {
        cmax = 5e-2
        minlevel = min_level
        maxlevel = max_level
    } V

    # Balance the number of elements across parallel subdomains at every
    # 5 timesteps if the imbalance is larger than 0.1 (i.e. 10% difference
    # between the largest and smallest subdomains).
    EventBalance { istep = 5 } 0.1

    # Output of solution information/data
    Time { end = end_time }
    OutputProgress { istep = 1 } stderr
    OutputTime { istep = 1 } turbulent_breakup.log
    OutputBalance { istep = 1 } turbulent_breakup.log
    OutputSimulation {
        start = 0 step = simulation_output_times
    } simulation_%09.3f.gfs
}
GfsBox {
}
